{"version":3,"sources":["components/Navbar.js","components/Profile.js","components/Repo.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","Profile","user","style","with","src","avatar_url","alt","public_repos","followers","following","html_url","target","Repo","repo","name","stargazers_count","watchers_count","forks_count","App","props","getUser","e","value","state","github","url","client_id","client_secret","count","sort","Axios","get","then","data","setState","repos","renderProfile","marginTop","map","key","action","onBlur","this","type","id","placeholder","width","alignSelf","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d15bc416.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = () => (\n  <nav className=\"navbar navbar-dark bg-dark mb-3\">\n    <div className=\"container\">\n      <a href=\"#\" className=\"navbar-brand\">\n        Github Search\n      </a>\n    </div>\n  </nav>\n);\n\nexport default Navbar;","import React from 'react';\n\nconst Profile = ({ user }) => (\n  <div>\n    <div className=\"row\">\n      <div className=\"col\">\n        <div className=\"card\" style={{ with: \"18rem\" }}>\n          <img src={user.avatar_url} alt=\"picture\" className=\"card-img-top\" />\n          <ul className=\"list-group list-group-flush\">\n            <li className=\"list-group-item\">\n              Repositórios:\n              <span className=\"badge badge-dark\">{user.public_repos}</span>\n            </li>\n            <li className=\"list-group-item\">\n              Seguidores:\n              <span className=\"badge badge-dark\">{user.followers}</span>\n            </li>\n            <li className=\"list-group-item\">\n              Seguindo:\n              <span className=\"badge badge-dark\">{user.following}</span>\n            </li>\n          </ul>\n          <div className=\"card-body\">\n            <a href={user.html_url} target=\"blank\" className=\"btn btn-dark btn-block\">\n              Ver perfil\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Profile;","import React from 'react';\n\nconst Repo = ({ repo }) => (\n  <div className=\"card card-body mb-2\">\n    <div className=\"row\">\n      <div className=\"col-md-6\">\n        <a href={repo.html_url} target=\"blank\">{repo.name}</a>\n      </div>\n      <div className=\"col-md-6\">\n        <span className=\"badge badge-dark\">Stars: {repo.stargazers_count}</span>\n        <span className=\"badge badge-dark\">Watch: {repo.watchers_count}</span>\n        <span className=\"badge badge-dark\">Forks: {repo.forks_count}</span>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Repo;","import 'dotenv/config'\n\nimport React from 'react';\nimport Axios from 'axios';\n\nimport Navbar from './components/Navbar';\nimport Profile from './components/Profile';\nimport Repo from './components/Repo';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      github: {\n        url: \"http://api.github.com/users\",\n        client_id: \"ad90b0b2099eb8f61246\",\n        client_secret: \"a00bf413894f9f9efc7c7907d03e7649778ef1b5\",\n        count: 7,\n        sort: \"created: asc\"\n      },\n      user: [],\n      repos: []\n    }\n  }\n\n  getUser = (e) => {\n    const user = e.target.value;\n\n    const { url, client_id, client_secret, count, sort } = this.state.github;\n    Axios\n      .get(\n        `${url}/${user}?client_id=${client_id}&client_secret=${client_secret}`\n      )\n      .then(({ data }) => this.setState({ user: data }));\n    Axios\n      .get(\n        `${url}/${user}/repos?per_page=${count}${sort}&client_id=${client_id}&\n      clint_secret=${client_secret}`\n      )\n      .then(({ data }) => this.setState({ repos: data }));\n  }\n\n  renderProfile = () => {\n    const { user, repos } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-4\" style={{ marginTop: \"10px\" }}>\n          <Profile user={user} />\n        </div>\n        <div className=\"col-md-8\" style={{ marginTop: \"10px\" }}>\n          {repos.map(repo => <Repo key={repo.name} repo={repo} />)}\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n\n        <div className=\"container\">\n          <div className=\"card card-body\">\n            <h1>Pesquisar Usuário</h1>\n            <form action=\"\">\n              <input\n                onBlur={this.getUser}\n                type=\"text\" id=\"search\"\n                placeholder=\"Digite o nome do usuário\"\n                className=\"form-control required\"\n              />\n            </form>\n            <button\n              className=\"btn btn-dark\"\n              style={{\n                width: \"100px\",\n                alignSelf: \"center\",\n                marginTop: \"20px\"\n              }}> Buscar </button>\n          </div>\n\n          {this.state.user.length !== 0 ? this.renderProfile() : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}